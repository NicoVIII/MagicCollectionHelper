//------------------------------------------------------------------------------
//        This code was generated by myriad.
//        Changes to this file will be lost when the code is regenerated.
//------------------------------------------------------------------------------
namespace rec MagicCollectionHelper.Core.Types.Generated

module CardInfo =
    open MagicCollectionHelper.Core.Types
    let name (x: CardInfo) = x.name
    let set (x: CardInfo) = x.set
    let collectorNumber (x: CardInfo) = x.collectorNumber
    let colors (x: CardInfo) = x.colors
    let colorIdentity (x: CardInfo) = x.colorIdentity
    let oracleId (x: CardInfo) = x.oracleId
    let rarity (x: CardInfo) = x.rarity
    let typeLine (x: CardInfo) = x.typeLine
    let cmc (x: CardInfo) = x.cmc
    let create
        (name: string)
        (set: MagicSet)
        (collectorNumber: CollectorNumber)
        (colors: Set<Color>)
        (colorIdentity: ColorIdentity)
        (oracleId: string)
        (rarity: Rarity)
        (typeLine: string)
        (cmc: uint)
        : CardInfo =
        { name = name
          set = set
          collectorNumber = collectorNumber
          colors = colors
          colorIdentity = colorIdentity
          oracleId = oracleId
          rarity = rarity
          typeLine = typeLine
          cmc = cmc }

    let map
        (mapname: string -> string)
        (mapset: MagicSet -> MagicSet)
        (mapcollectorNumber: CollectorNumber -> CollectorNumber)
        (mapcolors: Set<Color> -> Set<Color>)
        (mapcolorIdentity: ColorIdentity -> ColorIdentity)
        (maporacleId: string -> string)
        (maprarity: Rarity -> Rarity)
        (maptypeLine: string -> string)
        (mapcmc: uint -> uint)
        (record': CardInfo)
        =
        { record' with
              name = mapname record'.name
              set = mapset record'.set
              collectorNumber = mapcollectorNumber record'.collectorNumber
              colors = mapcolors record'.colors
              colorIdentity = mapcolorIdentity record'.colorIdentity
              oracleId = maporacleId record'.oracleId
              rarity = maprarity record'.rarity
              typeLine = maptypeLine record'.typeLine
              cmc = mapcmc record'.cmc }
namespace rec MagicCollectionHelper.Core.Types.Generated

module Card =
    open MagicCollectionHelper.Core.Types
    let number (x: Card) = x.number
    let foil (x: Card) = x.foil
    let language (x: Card) = x.language
    let set (x: Card) = x.set
    let create (number: CollectorNumber) (foil: bool) (language: Language) (set: MagicSet) : Card =
        { number = number
          foil = foil
          language = language
          set = set }

    let map
        (mapnumber: CollectorNumber -> CollectorNumber)
        (mapfoil: bool -> bool)
        (maplanguage: Language -> Language)
        (mapset: MagicSet -> MagicSet)
        (record': Card)
        =
        { record' with
              number = mapnumber record'.number
              foil = mapfoil record'.foil
              language = maplanguage record'.language
              set = mapset record'.set }
namespace rec MagicCollectionHelper.Core.Types.Generated

module CardEntry =
    open MagicCollectionHelper.Core.Types
    let amount (x: CardEntry) = x.amount
    let card (x: CardEntry) = x.card
    let create (amount: uint) (card: Card) : CardEntry = { amount = amount; card = card }
    let map (mapamount: uint -> uint) (mapcard: Card -> Card) (record': CardEntry) =
        { record' with
              amount = mapamount record'.amount
              card = mapcard record'.card }
namespace rec MagicCollectionHelper.Core.Types.Generated

module CardWithInfo =
    open MagicCollectionHelper.Core.Types
    let card (x: CardWithInfo) = x.card
    let info (x: CardWithInfo) = x.info
    let create (card: Card) (info: CardInfo) : CardWithInfo = { card = card; info = info }
    let map (mapcard: Card -> Card) (mapinfo: CardInfo -> CardInfo) (record': CardWithInfo) =
        { record' with
              card = mapcard record'.card
              info = mapinfo record'.info }
namespace rec MagicCollectionHelper.Core.Types.Generated

module CardEntryWithInfo =
    open MagicCollectionHelper.Core.Types
    let entry (x: CardEntryWithInfo) = x.entry
    let info (x: CardEntryWithInfo) = x.info
    let create (entry: CardEntry) (info: CardInfo) : CardEntryWithInfo = { entry = entry; info = info }
    let map (mapentry: CardEntry -> CardEntry) (mapinfo: CardInfo -> CardInfo) (record': CardEntryWithInfo) =
        { record' with
              entry = mapentry record'.entry
              info = mapinfo record'.info }
namespace rec MagicCollectionHelper.Core.Types.Generated

module Rarity =
    open MagicCollectionHelper.Core.Types
    let toString (x: Rarity) =
        match x with
        | Common -> "Common"
        | Uncommon -> "Uncommon"
        | Rare -> "Rare"
        | Mythic -> "Mythic"
        | Special -> "Special"
        | Bonus -> "Bonus"

    let fromString (x: string) =
        match x with
        | "Common" -> Some Common
        | "Uncommon" -> Some Uncommon
        | "Rare" -> Some Rare
        | "Mythic" -> Some Mythic
        | "Special" -> Some Special
        | "Bonus" -> Some Bonus
        | _ -> None

    let toTag (x: Rarity) =
        match x with
        | Common -> 0
        | Uncommon -> 1
        | Rare -> 2
        | Mythic -> 3
        | Special -> 4
        | Bonus -> 5

    let isCommon (x: Rarity) =
        match x with
        | Common -> true
        | _ -> false

    let isUncommon (x: Rarity) =
        match x with
        | Uncommon -> true
        | _ -> false

    let isRare (x: Rarity) =
        match x with
        | Rare -> true
        | _ -> false

    let isMythic (x: Rarity) =
        match x with
        | Mythic -> true
        | _ -> false

    let isSpecial (x: Rarity) =
        match x with
        | Special -> true
        | _ -> false

    let isBonus (x: Rarity) =
        match x with
        | Bonus -> true
        | _ -> false
